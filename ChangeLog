In dev (rev. 300)
-

*****************************************************************************************************************
Version 1.2.0b (svn rev. 300, 07.06.2008):
------------------------------------
Performance improvements:
 - 10%    fixed memory alignment for static_bitset that used by bit_manager, now bitset is uses memory starting from fifth byte, first four bytes used by bit_manager, updated malloc_allocator and memory_manager constructor comments to fit this changes
 - 250%   changed caching algorithm in bit_manager, now instead of caching of the block index used in for previous allocation, it will cache bit_hint - a bit number that used as a hint for static_bitset for find_n operation, it points to: prev_alloc_bit+prev_alloc_bits_count. 
 - 20-25% implemented alignment of allocatable memory area. for this purpose was implemented template that can round integer value to specified base value. 
 - 10-15% removed update_size routine from size_tracking implementation 
------------
 = 300%
 
------------------------------------
Implemented feature requests:
 - #1929433: Refactore implementation of shared memory allocators.
    * Refactored shared segment classes using NVI design pattern.
    * Made signatures of OS dependent APIs (for memory mapping) identical

------------------------------------
Fixed bugz:
 - #1983655: "allocator class implementation is incorrect"
 - #1981817: "It's impossible to use memory segment as first decorator"
    * Added default constructor to memory_manager class, it will generate compile time error if used
    * Added default constructor to pointer_convert and size_tracking classes, it will generate compile time error if decorated memory manager doesn't have attached memory segment
    * Added memory_segment_tag which indicates that memory manager has attached memory segment
    * Added memory_segment_tag  to manager_category of manager_traits for memory_segment
    * Removed explicit templates instantiation from unit tests
 - #1981826: "Heap and shared segments provides invalid manager_traits"
   * Changed base class' template specialization parameters for manager_traits for segments
 - #1985090: "vector_as_allocator works too slow"
    * implemented malloc_allocator that uses malloc/free to alloc/dealloc memory segment
    * moved vector_as_allocator to separate file
    * changed allocator heap_segment to malloc_allocator instead of vector_as_allocator
 - #1986144: "memory leaks in performance tests"
    * alloc(new) test function were updated, now they track all allocated objects, and before exit they deallocate these objects
 - #1986138: "alloc/dealloc tests implemented incorrectly"
    * alloc/dealloc tests were reimplemented to fit required test-scenario
 - #1986130: "there is a lot of code duplications in performance tests"
    * source code was refactored to use the same function for common tests
 - 1985107: "allocator does not validate memory manager type"
    * Implemented validation of memory manager categories in allocator's constructor
------------------------------------
Tasks:
 - #148941: "Implement memory segment manager"
    * added additional parameter to get_base - offset, so, now to get offset's base address you have to pass this offset to get_base method
    * renamed get_base method of memory_manager and it's decorators into get_offset_base
    * added two additional methods (get_segment_base and get_ptr_base) that return base addresses for memory segment and for specified pointer
    * added segment_manager class
------------------------------------	
Other:
 - added footer and stylesheet for doxy documentation
 - fixed precompiled header project settings for VS2005 
 - marked all managers functions as inline
 - enabled inlining and optimization for VS 2005 perf_tests project
 - updated comments for bit_manager memory_manager
 - used allocator class for std::string class in unit tests and performance tests 
 - implemented stub to prevent showing of assert box when quiting from performance test in debug build 
 - added time stamp to perf_results file name
 - added perf test for (external) GC Allocator - ScopeAlloc - just to compare performance
 - changed optimization level for VS2005 projects
 
*****************************************************************************************************************
Version 1.1.5 (svn rev. 270, 01.06.2008):
 - Task: 1929292: "Write technical documentation"
   Fully documented following files: type_manip.h, new.h,
      pointer_convert.h, size_tracking.h, heap_segment.h,
	  memory_segment.h, segment_traits.h, managed_base.h,
	  singleton_manager.h, manager_traits.h,
	  memory_manager.h and manager_category.h files
   
 - fixed code alignment in static_bitset
 - updated Doxyfile configuration
 - fixed identifiers names to match naming convention

!!!!!
 - fixed compiler errors on VC8 (VS2005)
 - Fixed issue with size_tracking decorator that brings memory corruption
 - Implemented unit test to catch memory corruptions made by size tracker decorator
 - Implemented overload of mem_mgr() function for singleton manager (to make life easier)
 - Added base_manager_type typedef to manager traits and decorator traits, this type represent manager type w/o decorator
 - renamed do_delete into delete_ and do_delete_arr into delete_array
 - improved unit tests for managed_base class, so now stored values are also checked
!!!!!

 - added build notes to README
 - updated copyright statement, web-site link and dev's nickname in files headers
 - updated configuration of VS2005 solution/projects
 - moved sync classes out of details namespace
 - all classes that were our of memory_mgr namespace were moved into
 - moved sync classes headers to "sync" folder
 - moved yes_type and no_type out of is_categoy_suppoted class
 - updated unit tests to use new mem_mgr function
 
*****************************************************************************************************************  
Version 1.0.0 (svn rev. 103, 03.03.2008):
 - implemented offset_pointer unit tests 
 - implemented size_tracking for offset and pointer managers
 - implemented new[]/delete[] operators for managed_base
 - implementation of offset_pointer finished
	* all manager_types are supported
	* destruction works correctly
 - operator new[]/do_delete_arr works with non class types correctly now
 - implemented new/do_delete and new[]/do_delete_arr operators
   to allocate any data type variables
 - implemented offset_pointer's polymorphic constructors
 - implemented get_offset and get_poiner friend functions for offset_pointer
 - fixed manager_traits to reflect real category tags
 - moved offset_to_pointer and pointer_to_offset methods to ptr_helpers.h
 - fixed memory_manager::free method
 - implemented all offset_pointer operators
 - moved size_cast to ptr_helpers.h
 - implemented is_class type_manip
 - fixed operators <= and >= in cmp_helper
 - made offset_pointer constructor with single offset parameter "explicit"
 - added TEST_OPERATOR_PRINT macro
 - implemented shared memory segment allocators (win and posix)
 - removed simple_ptr
 - removed unnecessary includes from heap_segment.h
 - added required includes to offset_pointer.h, test_class.h, 
   manager_category.h and memory_segment.h
 - implemented shared_segment unit tests
 - fixed unit tests names
 - removed constructor with parameter from memory_segment, 
   segment_allocator constructor should be used for this purposes
 - removed reset() call from static_bitset constructors
 - fixed bit_manager manager initialization for shared memory_manager
 - fixed misprint TEST_CHECH -> TEST_CHECK and 
   TEST_CHECH_MSG -> TEST_CHECK_MSG
 - added static_bitset initialization in static_bitset unit test
 - perf_tests project was added to kdevelop solution
 - implemented perf_timer for posix systems
 - implemented perf_tests for memory_manager
 - CPerfTimer methods were renamed according to naming conventions
 - CPerfTimer was renamed to win_perf_timer
 - perf_tests project was added to kdevelop solution
 - implemented macroses for declaring and using shared_segment names
 - moved do_nothing and throw_bad_alloc functions to helpers.h
 - helpers namespace moved out from detail namespace
 - implemented perf_test_manager to collect perf testing results
 - implemented perf tests for all types of managers
 - implemented performance tests for new/delete operators 
   and managed_base class
 - implemented is_null method for long double type to check is 
   it equal to null
 - added add_leading_slash/add_trailing_slash functions and 
   get_root_directory to helpers.h
 - reimplemented vector_as_allocator to use vector as member 
   instead of base class
 - implemented temp_buffer class and unit tests for it
 - added get_executable_path and get_exe_dir OS independent functions

***************************************************************************************************************** 
Version 0.8.0 (svn rev. 64):
 - change log file was added
 - allocator class added
 - added caching to bit_manager
 - fixed assert check error in memory_manager
 - namespace managers was renamed to memory_mgr
 - pointers and cast helper function were moved to ptr_helpers.h file
 - RTTI was disabled for VS projects
 - added VS2008 projects
 - singleton updated to have to separate parameters for instantiation type
   and for return type
 - implemented pointer traits class
 - type definitions were standardized: 
   suffix "_type" will be used in all typedefs
 - memory_manager allocate methods were re-implemented to use 
   invalid_offset as invalid result value instead of npos
 - added unit test for "no throw" memory_manager allocate operator 
 - fixed static_bitset::bit_mask(pos, count) method for case 
   when count is grater then 64 bits (int bits number)
 - fixed assertion expression on static_bitset::do_set method
 - added cmp_helper class which implements != operator using ==,
   <= using >, and >= using <
 - added logic implementation comments 
 - removed null_ptr from memory_manager class, it not used anymore
 - implemented unit tests manager which collects results of testing and
   prints those results
 - test_case class was fixed. for case test is failed in won't show 
   'Test succeeded.' message.
 - got rid from pointers classes in memory_manager, for now it works only 
   with offsets
 - added kdevelop automake g++ project
 - code made compatible with g++
 - split unit tests to separate files for each class
 - moved work with pointers from memory_manager to pointer_convert class
 - updated unit tests to fit new architecture
 - generalized static_bitset adn bit_manager output operators
 - fixed output in test_bit_manager and test_static_bitset
 - implemented offset_pointer which can be used as pointer for shared memory
 - implemented manager_traits - traits class for memory managers
 - categorized memory managers and memory segments
   
*****************************************************************************************************************
Version 0.6.3 beta (svn rev. 25)
 - license agreement was added
 - compiler dependent code was removed
 - added support for linux platform
 - added synchronization to managers
 - heap_memory_manager was re-implemented as decorator heap_memory
 - added deallocate method overload
 - pointer type was made a template parameter of memory_manager
 - fixed allocation sync issues
 - added null_ptr - a null pointer of ptr_t type
 - added type manipulation library
 - added simple_ptr template class - a basic class for all smart pointers

******************************************************************************************************************
Version 0.6.0
 - implemented generic singleton
 - implemented singleton manager (heap_memory_manager)
 - some design modifications made
 - added separate template singleton_manager which allows to make singleton 
   any manager 
 - solution was renamed
 - added base class for managed objects
 - implemented memory limits checking (std::bad_alloc will be thrown 
   if manager is out of memory)
 - implemented deallocation checking (on second deallocation of the same 
   pointer assertion will stop program execution)
 - implemented nothrow version of operator new in managed_base class
 - fixed issue in static_bitset test() method 
 - unit tests updated
 - added empty() and free() methods to memory managers
 - fixed test case object name in tests macro
 - files were restructured
 - removed unused project's folders 

*****************************************************************************************************************
Version 0.1.0a
 - removed boost dependencies 
 - unit tests implementation started
 - comments were added

***************************************************************************************************************** 
Version 0.0.3 
 - basic functionality implemented
